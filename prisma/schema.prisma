// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Artwork {
    id               Int         @id @default(autoincrement())
    name             String
    imageUrl         String
    dimension        String
    description      String?
    featured         Boolean
    availableForSale Boolean
    price            Int
    currency         Currency    @default(ETB)
    createdAt        DateTime    @default(now())
    updatedAt        DateTime    @updatedAt
    collectionId     Int?
    media            Media[]     @relation("ArtworkAndMedia")
    Collection       Collection? @relation(fields: [collectionId], references: [id])
}

enum Currency {
    ETB
    USD
}

model Media {
    id          Int       @id @default(autoincrement())
    name        String
    description String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    artworks    Artwork[] @relation("ArtworkAndMedia")
}

model Collection {
    id          Int       @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    artworks    Artwork[]
}

// model MediaOnArtworks {
//     artwork    Artwork  @relation(fields: [artworkId], references: [id])
//     artworkId  Int
//     media      Media    @relation(fields: [mediaId], references: [id])
//     mediaId    Int
//     assignedAt DateTime @default(now())
//     assignedBy String

//     @@id([artworkId, mediaId])
// }

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          UserRole  @default(USER)
    accounts      Account[]
    sessions      Session[]
}

enum UserRole {
    USER
    ADMIN
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
