// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Artwork {
    id               Int          @id @default(autoincrement())
    name             String
    imageUrl         String
    dimension        String
    description      String       @db.Text
    featured         Boolean
    availableForSale Boolean
    price            Int
    currency         Currency     @default(ETB)
    orientation      Orientation?
    collectionId     Int?
    orderId          Int?
    createdById      String
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @updatedAt
    Collection       Collection?  @relation(fields: [collectionId], references: [id])
    Order            Order?       @relation(fields: [orderId], references: [id])
    CreatedBy        User         @relation(fields: [createdById], references: [id])
    Medium            Media[]      @relation("ArtworkAndMedia")
}

enum Currency {
    ETB
    USD
}

enum Orientation {
    Portrait
    Landscape
}

model Media {
    id          Int       @id @default(autoincrement())
    name        String
    description String?   @db.Text
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    Artworks    Artwork[] @relation("ArtworkAndMedia")
}

model Collection {
    id          Int       @id @default(autoincrement())
    name        String
    description String?   @db.Text
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    artworks    Artwork[]
}

model Order {
    id            Int           @id @default(autoincrement())
    orderedById   String
    phoneNumber   String
    paymentMethod PaymentMethod @default(CashOnDelivery)
    screenshotUrl String?
    price         Int
    currency      Currency      @default(ETB)
    orderStatus   OrderStatus
    orderedAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    OrderedBy     User          @relation(fields: [orderedById], references: [id])
    Artworks      Artwork[]
}

enum PaymentMethod {
    CashOnDelivery
    CBE
    Telebirr
    Bunna
}

enum OrderStatus {
    Ordered
    OrderedAndPaid
    Completed
    Cancelled
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    role            UserRole  @default(USER)
    accounts        Account[]
    sessions        Session[]
    createdArtworks Artwork[]
    Order           Order[]
}

enum UserRole {
    USER
    ADMIN
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
