generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Artwork {
    id               Int             @id @default(autoincrement())
    name             String
    dimension        String
    shortDescription String          @db.Text
    description      String          @db.Text
    featured         Boolean         @default(false)
    availableForSale Boolean
    price            Int
    currency         Currency        @default(ETB)
    orientation      Orientation?
    collectionId     Int?
    createdById      String
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
    Collection       Collection?     @relation(fields: [collectionId], references: [id])
    CreatedBy        User            @relation(fields: [createdById], references: [id])
    Medium           Media[]         @relation("ArtworksAndMedium")
    Files            File[]          @relation("ArtworksAndFiles")
    Orders           ArtworkOrders[]

    @@map("Artworks")
}

model Media {
    id             Int       @id @default(autoincrement())
    name           String
    description    String?   @db.Text
    featured       Boolean   @default(false)
    featureImageId Int?
    featureOrder   Int
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    FeatureImage   File?     @relation(fields: [featureImageId], references: [id])
    Artworks       Artwork[] @relation("ArtworksAndMedium")

    @@map("Medium")
}

model Collection {
    id          Int       @id @default(autoincrement())
    name        String
    description String?   @db.Text
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    artworks    Artwork[]

    @@map("Collections")
}

model Order {
    id              Int             @id @default(autoincrement())
    orderedById     String
    phoneNumber     String
    paymentMethod   PaymentMethod   @default(CashOnDelivery)
    screenshotId    Int?
    totalPrice      Int
    currency        Currency        @default(ETB)
    orderStatus     OrderStatus
    orderedAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    OrderedBy       User            @relation(fields: [orderedById], references: [id])
    Screenshot      File?           @relation(fields: [screenshotId], references: [id])
    OrderedArtworks ArtworkOrders[]

    @@map("Orders")
}

model ArtworkOrders {
    artworkId Int
    Artwork   Artwork  @relation(fields: [artworkId], references: [id])
    orderId   Int
    Order     Order    @relation(fields: [orderId], references: [id])
    price     Int
    currency  Currency @default(ETB)

    @@id([artworkId, orderId])
    @@map("ArtworkOrders")
}

model File {
    id             Int       @id @default(autoincrement())
    fileUrl        String
    fileType       FileType
    mimeType       String?
    blurHash       String?
    Order          Order[]
    Artwork        Artwork[] @relation("ArtworksAndFiles")
    FeaturingMedia Media[]

    @@map("Files")
}

enum Currency {
    ETB
    USD
}

enum Orientation {
    Portrait
    Landscape
}

enum PaymentMethod {
    CashOnDelivery
    CBE
    Telebirr
    Bunna
}

enum OrderStatus {
    Ordered
    OrderedAndPaid
    Completed
    Cancelled
}

enum FileType {
    Image
    Video
    Unknown
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("Accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("Sessions")
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    role            UserRole  @default(USER)
    accounts        Account[]
    sessions        Session[]
    createdArtworks Artwork[]
    Order           Order[]

    @@map("Users")
}

enum UserRole {
    USER
    ADMIN
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("VerificationTokens")
}
